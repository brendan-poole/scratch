// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gosseyn.betfair.domain;

import com.gosseyn.betfair.domain.Price;
import java.lang.Long;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Price_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager Price.entityManager;
    
    @Transactional
    public void Price.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Price.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Price attached = Price.findPrice(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Price.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Price.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Price Price.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Price merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Price.entityManager() {
        EntityManager em = new Price().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Price.countPrices() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Price o", Long.class).getSingleResult();
    }
    
    public static List<Price> Price.findAllPrices() {
        return entityManager().createQuery("SELECT o FROM Price o", Price.class).getResultList();
    }
    
    public static Price Price.findPrice(Long id) {
        if (id == null) return null;
        return entityManager().find(Price.class, id);
    }
    
    public static List<Price> Price.findPriceEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Price o", Price.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
